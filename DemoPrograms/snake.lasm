# global vars
# stack: 0x00 to 0x7F
.HEAD_X         0x80
.HEAD_Y         0x81
.TAIL_X         0x82
.TAIL_Y         0x83
.HEAD_IDX       0x84    # Head & tail indices of the circular queue. New directions are added at the head
.TAIL_IDX       0x85
.HEAD_DIR       0x8F
.BODY_DIRS      0x90    # to 0x9F. Each char stores 4 crumbs. Crumb 0 is at the least significant position
.SCREEN_STATE   0xA0    # to 0xA7. Each char stores the 8 pixels of the row. Pixel 0 is MSB of each row
.APPLE_X        0xB0
.APPLE_Y        0xB1

# ---------------------------------------------------------------------------------------------------------------------
# void main()
# [r3 - 1] = headX
# [r3 - 2] = headY
# [r3 - 3] = headIdx >> 2
# [r3 - 4] = tailIdx >> 2

incr3 4

# Initialize snake and screen

store0 HEAD_DIR
store0 TAIL_IDX

store0 SCREEN_STATE         # Empty lines of screen
store0 [SCREEN_STATE + 1]
store0 [SCREEN_STATE + 2]
store0 [SCREEN_STATE + 4]
store0 [SCREEN_STATE + 5]
store0 [SCREEN_STATE + 6]
store0 [SCREEN_STATE + 7]

set0 0x10           # Non-empty line of screen
store0 [SCREEN_STATE + 3]

set0 3              # Head/tail position
store0 HEAD_X
store0 HEAD_Y
store0 TAIL_Y
store0 BODY_DIRS    # 1st body part direction
set0 2
store0 TAIL_X

set0 1              # Head index in body direction circular queue
store0 HEAD_IDX

# Show initial screen state
dispi
disp8

# Wait for player input to start. Also obtain a seed for the RNG (stored in r2)
start:
input r0
incr2 1
jif0 start

# Main game loop
main_loop:

# Determine new head direction (r1)
load1 HEAD_DIR
input r0
jif0 dir_change_end         # No input -- direction unchanged

set1 -1                     # Increment r1 until r0 is zero
get_dir_loop:
incr0 -1
incr1 1
jifn0 dir_change_end
dir_change_end:
store1 HEAD_DIR

# Determine new head position (r0 = x, r1 = y)
set4 0x07               # Mask = 0000_0111
call dir_to_delta_xy
load0 HEAD_X
add r1 r0 r1
and r0 r1 r4
load1 HEAD_Y
add r2 r0 r2
and r1 r2 r4
sloc0 -1
sloc1 -2

# Extract pixel at new head position (r0 = pixel). Simultaneously, set r1 to be 1000_0000 >> x
addro1 SCREEN_STATE
loadi r2
set1 0x70
jump extract_cond
extract_start:
add r2 r2 r2
shr r1 r1
incr0 -1
extract_cond:
jifn0 extract_start

# If pixel is nonempty, game over
jifn game_over

# Color in pixel of new head position
lloc0 -1
addro0 SCREEN_STATE
loadi r2
or r2 r2 r1
storei r2

# Move head to new position
lloc1 -2
store0 HEAD_X
store1 HEAD_Y

# Load block of bodyDir containing the head pointer
load2 HEAD_DIR
load1 HEAD_IDX
set4 0x03
and r0 r1 r4
shr r1
shr r1
sloc1 -3
addro1 BODY_DIRS
loadi r1

# Add the new head direction to the block
set4 0x03
# Curr registers: r0 = body dir sub index, r1 = body dir block, r2 = head dir, r4 = mask
jump head_append_cond
head_append_loop:
add r2 r2 r2
add r2 r2 r2
add r4 r4 r4
add r4 r4 r4
incr r0 -1
head_append_cond:
jifn0 head_append_loop
not r4 r4
and r1 r1 r4
or r1 r1 r2

# Write the block back to memory
lloc0 -3
addro0 BODY_DIRS
storei r1

# Increment head index
load0 HEAD_IDX
incr0 1
set4 0x0F
and r0 r0 r4
store0 HEAD_IDX

# Uncolor pixel containing the tail
load0 TAIL_X
load1 TAIL_Y
addro1 SCREEN_STATE
loadi r2

set r1 0x70                 # Build mask
jump tail_uncolor_cond
tail_uncolor_loop:
shr r1 r1
incr r0 -1
tail_uncolor_cond:
jifn0 tail_uncolor_loop

not r1 r1
and r2 r2 r1
load1 TAIL_Y
addro1 SCREEN_STATE
storei r2

# Get the direction of the last item in the body directions queue
load1 TAIL_IDX          # Load block containing the direction
set4 0x03
and r0 r1 r4
shr r1 r1
shr r1 r1
addro1 BODY_DIRS
loadi r1

jump move_tail_cond     # Extract direction
move_tail_loop:
shr r1 r1
shr r1 r1
incr0 -1
move_tail_cond:
jifn0 move_tail_loop
set4 0x03
and r0 r1 r4

# Compute new tail position
call dir_to_delta_xy
load0 TAIL_X
add r1 r0 r1
store1 TAIL_X
load0 TAIL_Y
add r2 r0 r2
store2 TAIL_Y

# Increment tail index
load0 TAIL_IDX
incr0 1
set4 0x0F
and r0 r0 r4
store0 TAIL_IDX

# Show the screen
dispi
disp8

jump main_loop

game_over:
halt    # TODO: game over animation



# ---------------------------------------------------------------------------------------------------------------------
# Converts a 2-bit direction (r0) to delta X (r1) and delta Y (r2) values
# Direction order: Up, Down, Left, Right (Helpful to remember Konami code)
#
# (char, char) dirToDeltaXY(char dir)

dir_to_delta_xy:
set1 0                      # dir 0 = up
set2 -1

jif0 dir_to_delta_xy_end
incr0 -1                    # dir 1 = down
set2 -1

jif0 dir_to_delta_xy_end
incr0 -1                    # dir 2 = left
set1 -1
set2 0

jif0 dir_to_delta_xy_end
set1 1                      # dir 3 = right

dir_to_delta_xy_end:
ret 0


# ---------------------------------------------------------------------------------------------------------------------
# Linear-feedback shift register PRNG. Based on https://www.codebase64.org/doku.php?id=base:small_fast_8-bit_prng
#
# char random(char state)

random:
jif0 do_xor         # Special case: 0x00 maps to 0x1D

add r0 r0 r0
jif0 skip_xor       # Special case: 0x80 maps to 0x00
jifn skip_xor

do_xor:
set1 0x1D
xor x0 x0 x1

skip_xor:
ret 0
